-- Cant have multiple moor files with inter dependene on tables hence all in one files
-- Moor requires queries to come after all the table declarations

-------------
-- User Table
-------------
CREATE TABLE Users (
    userId TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    about TEXT,
    profileImg TEXT
);

-------------
-- FriendRequests Table
-- Status = 1 ( pending), 2 (Accepted), 3 (Rejected/Cancelled)
-------------
CREATE TABLE FriendRequests(
    userId_1 TEXT NOT NULL REFERENCES Users(userId),
    userId_2 TEXT NOT NULL REFERENCES Users(userId),
    status INT NOT NULL,
    PRIMARY KEY(userId_1, userId_2)
);

--------------
-- DM Messages
--------------
CREATE TABLE ChatMessages (
    msgId TEXT NOT NULL,
    fromUser TEXT NOT NULL REFERENCES Users(userId),
    toUser TEXT NOT NULL REFERENCES Users(userId),
    time DATETIME NOT NULL,
    content TEXT,
    media TEXT,
    replyTo TEXT,
    CONSTRAINT hasData CHECK (content IS NOT NULL OR media IS NOT NULL)
) AS ChatMessage;

-------------
-- Group Table
-------------
CREATE TABLE GroupDMs (
    groupId TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    groupIcon TEXT
);

-------------
-- User - Group Mapping Table
-------------
CREATE TABLE GroupUserMapping (
    groupId TEXT NOT NULL REFERENCES GroupDMs(groupId),
    userId TEXT NOT NULL REFERENCES Users(userId),
    PRIMARY KEY(groupId, userId)
);

--------------
-- Group Messages
--------------
CREATE TABLE GroupChatMessages (
    msgId TEXT NOT NULL PRIMARY KEY,
    groupId TEXT NOT NULL REFERENCES GroupDMs(groupId),
    fromUser TEXT NOT NULL REFERENCES Users(userId),
    time DATETIME NOT NULL,
    content TEXT,
    media TEXT,
    replyTo TEXT,
    CONSTRAINT hasData CHECK (content IS NOT NULL OR media IS NOT NULL)
) AS GroupChatMessage;

-- Indexes
CREATE INDEX fromUserIndex ON ChatMessages(fromUser);
CREATE INDEX toUserIndex ON ChatMessages(toUser);
CREATE INDEX groupIndex ON GroupChatMessages(groupID);

CREATE VIRTUAL TABLE ChatMessagesTextIndex USING fts5(msgId UNINDEXED, fromUser UNINDEXED, toUser UNINDEXED, time UNINDEXED, content, media UNINDEXED, replyTo UNINDEXED, content='ChatMessages', content_rowid='rowid', tokenize = 'porter unicode61');

CREATE VIRTUAL TABLE GroupChatMessagesTextIndex USING fts5(msgId UNINDEXED, groupId UNINDEXED, fromUser UNINDEXED, time UNINDEXED, content, media UNINDEXED, replyTo UNINDEXED, content='GroupChatMessages', content_rowid='rowid', tokenize = 'porter unicode61');


-- Triggers to keep index in sync
CREATE TRIGGER ChatMessagesTextIndex_AI AFTER INSERT ON ChatMessages BEGIN
    INSERT INTO ChatMessagesTextIndex(rowid, msgId, fromUser, toUser, time, content, media, replyTo) VALUES (new.rowid, new.msgId, new.fromUser, new.toUser, new.time, new.content, new.media, new.replyTo);
END;

CREATE TRIGGER ChatMessagesTextIndex_AD AFTER DELETE ON ChatMessages BEGIN
    INSERT INTO ChatMessagesTextIndex(ChatMessagesTextIndex, rowid, msgId, fromUser, toUser, time, content, media, replyTo) VALUES ('delete', old.rowid, old.msgId, old.fromUser, old.toUser, old.time, old.content, old.media, old.replyTo);
END;

CREATE TRIGGER ChatMessagesTextIndex_AU AFTER UPDATE ON ChatMessages BEGIN
    INSERT INTO ChatMessagesTextIndex(ChatMessagesTextIndex, rowid, msgId, fromUser, toUser, time, content, media, replyTo) VALUES ('delete', old.rowid, old.msgId, old.fromUser, old.toUser, old.time, old.content, old.media, old.replyTo);
    INSERT INTO ChatMessagesTextIndex(rowid, msgId, fromUser, toUser, time, content, media, replyTo) VALUES (new.rowid, new.msgId, new.fromUser, new.toUser, new.time, new.content, new.media, new.replyTo);
END;


-- Group chat messages Indexes
CREATE TRIGGER GroupChatMessagesTextIndex_AI AFTER INSERT ON GroupChatMessages BEGIN
    INSERT INTO GroupChatMessagesTextIndex(rowid, msgId, groupId, fromUser, time, content, media, replyTo) VALUES (new.rowid, new.msgId, new.groupId, new.fromUser, new.time, new.content, new.media, new.replyTo);
END;

CREATE TRIGGER GroupChatMessagesTextIndex_AD AFTER DELETE ON GroupChatMessages BEGIN
    INSERT INTO GroupChatMessagesTextIndex(GroupChatMessagesTextIndex, rowid, msgId, groupId, fromUser, time, content, media, replyTo) VALUES ('delete', old.rowid, old.msgId, old.groupId, old.fromUser, old.time, old.content, old.media, old.replyTo);
END;

CREATE TRIGGER GroupChatMessagesTextIndex_AU AFTER UPDATE ON GroupChatMessages BEGIN
    INSERT INTO GroupChatMessagesTextIndex(GroupChatMessagesTextIndex, rowid, msgId, groupId, fromUser, time, content, media, replyTo) VALUES ('delete', old.rowid, old.msgId, old.groupId, old.fromUser, old.time, old.content, old.media, old.replyTo);
    INSERT INTO GroupChatMessagesTextIndex(rowid, msgId, groupId, fromUser, time, content, media, replyTo) VALUES (new.rowid, new.msgId, new.groupId, new.fromUser, new.time, new.content, new.media, new.replyTo);
END;

-------------
-- Rooms Table
-------------

CREATE TABLE RoomsList (
    roomId TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    roomIcon TEXT
);

-------------
-- Rooms - User Mapping
-------------

CREATE TABLE RoomsUserMapping (
    roomId TEXT NOT NULL REFERENCES RoomsList(roomId),
    userId TEXT NOT NULL REFERENCES Users(userId),
    PRIMARY KEY(roomId, userId)
);

-------------
-- Channels list in Rooms
-------------

CREATE TABLE RoomsChannels (
    roomId TEXT NOT NULL REFERENCES RoomsList(roomId),
    channelId TEXT NOT NULL,
    channelName TEXT NOT NULL,
    PRIMARY KEY(roomId, channelId)
);

-------------
-- Rooms Messages
-------------

CREATE TABLE RoomsMessages (
    msgId TEXT NOT NULL PRIMARY KEY,
    roomId TEXT NOT NULL REFERENCES RoomsList(roomId),
    channelId TEXT NOT NULL REFERENCES RoomsChannels(channelId),
    fromUser TEXT NOT NULL REFERENCES Users(userId),
    time DATETIME NOT NULL,
    content TEXT,
    media TEXT,
    replyTo TEXT,
    CONSTRAINT hasData CHECK (content IS NOT NULL OR media IS NOT NULL)
);

----------
----------
-- Queries
----------
----------

-------------
-- User Table
-------------
addUser(:userId AS TEXT, :name AS TEXT, :about AS TEXT OR NULL, :profileImg AS TEXT OR NULL): INSERT into Users VALUES (:userId, :name, :about, :profileImg);

getAllUsers: SELECT * FROM Users;
getUserById(:userId AS TEXT): SELECT * FROM Users WHERE userId = :userId;
getUsersNameMatching(:match AS TEXT): SELECT * FROM Users WHERE LOWER(name) LIKE '%' || :match || '%';

-------------
-- FriendRequests Table
-------------
getFriends(:userId as TEXT): SELECT U.* FROM Users AS U, (SELECT userId_1 AS id FROM FriendRequests WHERE (userId_2 = :userId) AND (status = 2) UNION SELECT userId_2 AS id FROM FriendRequests WHERE (userId_1 = :userId) AND (status = 2)) AS F WHERE (U.userId = F.id);  
getFriendRequests(:userId as TEXT): SELECT U.*, F.st FROM Users AS U, (SELECT userId_2 AS id, status as st FROM FriendRequests WHERE (userId_1 = :userId)) AS F WHERE (U.userId = F.id);  
addNewFriendRequest(:userId_1 as TEXT, :userId_2 as TEXT, :status as INT): INSERT INTO FriendRequests VALUES(:userId_1, :userId_2, :status);
updateFriendRequest(:userId_1 as TEXT, :userId_2 as TEXT, :status as INT): UPDATE FriendRequests SET status = :status WHERE (userId_1 = :userId_1) AND (userId_2 = :userId_2);

-------------
-- Groups Table
-------------
createGroup(:groupId AS TEXT, :name AS TEXT, :description AS TEXT OR NULL, :groupIcon AS TEXT OR NULL): INSERT into GroupDMs VALUES (:groupId, :name, :description, :groupIcon);
getGroupsNameMatching(:match AS TEXT): SELECT * FROM GroupDMs WHERE LOWER(name) LIKE '%' || :match || '%';


-------------
-- Group-User Mapping Table
-------------
addUserToGroup(:groupId AS TEXT, :userId AS TEXT): INSERT into GroupUserMapping VALUES (:groupId, :userId);
removeUserFromGroup(:groupId AS TEXT, :userId AS TEXT): DELETE from GroupUserMapping WHERE (userId = :userId) AND (groupId = :groupId);


getGroupsOfUser(:userID AS TEXT): SELECT DISTINCT G.groupId, G.name, G.description, G.groupIcon FROM GroupDMs AS G, GroupUserMapping as GM WHERE GM.userId = :userID;   
getGroupMembers(:groupID AS TEXT): SELECT U.* FROM Users AS U, (SELECT DISTINCT userId FROM GroupUserMapping AS GM WHERE GM.groupId = :groupID) AS UID WHERE U.userId = UID.userId; 


-------------
-- Group Chat Messages Table
-------------
getGroupChat(:groupId AS TEXT): SELECT * FROM GroupChatMessages WHERE groupId = :groupId ORDER BY msgId;
insertGroupChatMessage(:msgId AS TEXT, :groupId AS TEXT, :fromUser AS TEXT, :time AS DATETIME, :content AS TEXT OR NULL, :media AS TEXT OR NULL, :replyTo AS TEXT OR NULL): INSERT INTO GroupChatMessages VALUES (:msgId, :groupId, :fromUser, :time, :content, :media, :replyTo);

--------------
-- DM Messages
--------------

getUserChat(:otherUser AS TEXT): SELECT * FROM ChatMessages WHERE fromUser = :otherUser OR toUser = :otherUser ORDER BY msgId;

insertMessage(:msgId AS TEXT, :fromUser AS TEXT, :toUser AS TEXT, :time AS DATETIME, :content AS TEXT OR NULL, :media AS TEXT OR NULL, :replyTo AS TEXT OR NULL): INSERT INTO ChatMessages VALUES (:msgId, :fromUser, :toUser, :time, :content, :media, :replyTo);

-- Search
-- Possible BUG! -> if 'uvw AND xyz' is search string then the query we execute searchs for match of both 'uvw' and 'xyz'
-- Remove key words from search string if this happens
searchChatMessages(:query AS TEXT, :limit AS INT OR NULL): SELECT c.content, u.* FROM Users u JOIN (SELECT fromUser, toUser, content FROM ChatMessagesTextIndex WHERE content MATCH :query ORDER BY rank LIMIT :limit) c ON c.fromUser = u.userId OR c.toUser = u.userId;
searchGroupChatMessages(:query AS TEXT, :limit AS INT OR NULL): SELECT c.content, g.* FROM GroupDMs g JOIN (SELECT groupId, content FROM GroupChatMessagesTextIndex WHERE content MATCH :query ORDER BY rank LIMIT :limit) c ON c.groupId = g.groupId;

--------
-- Rooms
--------
createRoom(:roomId AS TEXT, :name AS TEXT, :description AS TEXT OR NULL, :roomIcon AS TEXT OR NULL): INSERT into RoomsList VALUES (:roomId, :name, :description, :roomIcon);

getRoomDetails(:roomId AS TEXT): SELECT * FROM RoomsList WHERE roomId = :roomId;

-------------
-- Rooms-User Mapping Table
-------------
addUserToRoom(:roomId AS TEXT, :userId AS TEXT): INSERT into RoomsUserMapping VALUES (:roomsId, :userId);

getRoomsOfUser(:userID AS TEXT): SELECT DISTINCT R.roomId, R.name, R.description, R.roomIcon FROM RoomsList AS R, RoomsUserMapping as RM WHERE RM.userId = :userID AND RM.roomId = R.roomId;   

getRoomMembers(:roomID AS TEXT): SELECT U.* FROM Users AS U, (SELECT DISTINCT userId FROM RoomsUserMapping AS RM WHERE RM.roomId = :roomID) AS UID WHERE U.userId = UID.userId; 

-------------
-- Rooms-Channels Mapping Table
-------------
addChannelsToRoom(:channelId AS TEXT, :roomId AS TEXT, :channelName as TEXT): INSERT into RoomsChannels VALUES (:roomId, :channelId, :channelName);

getChannelsOfRoom(:roomID AS TEXT): SELECT RC.* FROM RoomsChannels AS RC WHERE RC.roomId = :roomID;
getChannelName(:roomId AS TEXT, :channelId AS TEXT): SELECT * FROM RoomsChannels WHERE roomId = :roomId AND channelId = :channelId;
-------------
-- Rooms Channel-wise Messages Table
-------------
insertRoomsChannelMessage(:msgId AS TEXT, :roomID AS TEXT, :channelId AS TEXT, :fromUser AS TEXT, :time AS DATETIME, :content AS TEXT OR NULL, :media AS TEXT OR NULL, :replyTo AS TEXT OR NULL): INSERT INTO RoomsMessages VALUES (:msgId, :roomId, :channelId,:fromUser, :time, :content, :media, :replyTo);

getRoomChannelChat(:roomId AS TEXT, :channelId AS TEXT): SELECT * FROM RoomsMessages WHERE roomId = :roomId AND channelId = :channelId ORDER BY msgId;

-- NOTE
-- While using text full search index, if we use normal way like chats.moor
-- With edit of non text field, while index of text will also be updated
-- Thus we should remove the editable fields other than text into a different table and reference it in main table. EX: Pins & Reacts
-- Also, not that if text is edited then message ID will be changed, that means, we won't have row updates for text instead row delete and a new row insert with a completely different message ID