-- DM Messages
--------------
CREATE TABLE ChatMessages (
    msgId BIGINT NOT NULL PRIMARY KEY,
    fromUser BIGINT NOT NULL,
    toUser BIGINT NOT NULL,
    time DATETIME NOT NULL,
    content TEXT,
    media TEXT,
    replyTo BIGINT
) AS ChatMessage;

-- Indexes
CREATE INDEX fromUserIndex ON ChatMessages(fromUser);
CREATE INDEX toUserIndex ON ChatMessages(toUser);

-- Text Content with full search
---------------------------------
CREATE VIRTUAL TABLE ChatMessagesTextIndex USING fts5(fromUser UNINDEXED, toUser UNINDEXED, time UNINDEXED, content, media UNINDEXED, replyTo UNINDEXED, content='ChatMessages', content_rowid='msgId');

-- Triggers to keep index in sync
CREATE TRIGGER ChatMessagesTextIndex_AI AFTER INSERT ON ChatMessages BEGIN
    INSERT INTO ChatMessagesTextIndex(rowid, fromUser, toUser, time, content, media, replyTo) VALUES (new.msgId, new.fromUser, new.toUser, new.time, new.content, new.media, new.replyTo);
END;

CREATE TRIGGER ChatMessagesTextIndex_AD AFTER DELETE ON ChatMessages BEGIN
    INSERT INTO ChatMessagesTextIndex(ChatMessagesTextIndex, rowid, fromUser, toUser, time, content, media, replyTo) VALUES ('delete', old.msgId, old.fromUser, old.toUser, old.time, old.content, old.media, old.replyTo);
END;

CREATE TRIGGER ChatMessagesTextIndex_AU AFTER UPDATE ON ChatMessages BEGIN
    INSERT INTO ChatMessagesTextIndex(ChatMessagesTextIndex, rowid, fromUser, toUser, time, content, media, replyTo) VALUES ('delete', old.msgId, old.fromUser, old.toUser, old.time, old.content, old.media, old.replyTo);
    INSERT INTO ChatMessagesTextIndex(rowid, fromUser, toUser, time, content, media, replyTo) VALUES (new.msgId, new.fromUser, new.toUser, new.time, new.content, new.media, new.replyTo);
END;

-- Queries
getUserChat(:otherUser AS BIGINT): SELECT * FROM ChatMessages WHERE fromUser = :otherUser OR toUser = :otherUser;

insertTextMessage(:msgId AS BIGINT, :fromUser AS BIGINT, :toUser AS BIGINT, :time AS DATETIME, :content AS TEXT, :replyTo AS BIGINT OR NULL): INSERT INTO ChatMessages VALUES (:msgId, :fromUser, :toUser, :time, :content, NULL, :replyTo);

insertMediaMessage(:msgId AS BIGINT, :fromUser AS BIGINT, :toUser AS BIGINT, :time AS DATETIME, :content AS TEXT OR NULL, :media AS TEXT, :replyTo AS BIGINT OR NULL): INSERT INTO ChatMessages VALUES (:msgId, :fromUser, :toUser, :time, :content, :media, :replyTo);

-- Search
-- Possible BUG! -> if 'uvw AND xyz' is search string then the query we execute searchs for match of both 'uvw' and 'xyz'
-- Remove key words from search string if this happens
searchChatMessages(:query AS TEXT, :limit AS INT OR NULL): SELECT * FROM ChatMessagesTextIndex WHERE content MATCH :query ORDER BY rank LIMIT :limit;